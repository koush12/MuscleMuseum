classdef (Abstract) Trial < handle & matlab.mixin.SetGetExactNames & dynamicprops
    %Trial Summary of this class goes here
    %   Detailed explanation goes here

    properties
        Description string = "This is a test trial."
        NCompletedRun int32 = 0
        NRun int32 = 1
        ScannedParameter string = "dummy"
        ScannedParameterUnit string = "V"
    end

    properties (SetAccess = private)
        DateTime datetime % The date and time when the experiment/simulation is done.
    end

    properties (SetAccess = protected)
        Name string
        DataPath string = "."
        ObjectPath string
        SerialNumber int32
    end

    properties (Dependent)
        IsCompeted logical
    end

    properties (SetAccess = protected, Hidden)
        ParentPath {mustBeFolder} = "."
        IsAutoDelete logical = false
        DatabaseName string
        DatabaseTableName string
        DataPrefix string = "run"
        DataFormat string = ".mat"
        DatePath string
        TrialPath string
        DataAnalysisPath string
        DataGroupSize uint32 = 1
        TrialIndex uint32 = 1
        ControlAppName string
    end

    properties (SetAccess = protected, Hidden, Transient)
        Reader database.postgre.connection
        Writer database.postgre.connection
        FileSystemWatcher
        Watcher event.listener
        Analyzer event.listener
        ControlApp
    end

    properties (Hidden,Transient)
        TempData = []
        TempDataPath string
    end

    properties (Hidden)
        ConfigParameter struct
    end

    methods
        function obj = Trial(trialName,config)
            arguments
                trialName string
                config
            end

            %% Check if the input trialName is alphanum
            if isAlphaNum(trialName)
                obj.Name = trialName;
            else
                error('Trial name must only have numbers and alphabetic characters.')
            end

            %% Check the class of [config] and assign configuration properties
            if isstruct(config)
                obj.ConfigParameter = config;
            elseif istable(config)
                obj.ConfigParameter = table2struct(config);
            elseif isstring(config)
                % Load the configuration from file
                try
                    configTable = loadVar("Config.mat",config);
                catch
                    error("Can not find the configuration table in [Config.mat]. Try running the [setConfig.m] file.")
                end

                % Set the configuration parameters
                if ismember(trialName,configTable.TrialName)
                    obj.ConfigParameter = table2struct(configTable(configTable.TrialName==trialName,:));      
                elseif find(configTable.TrialName=="Test")
                    warning("Can not find the configuration for TrialName: " + trialName +...
                        ". Loaded the [Test] trial configuration instead.")
                    obj.ConfigParameter = table2struct(configTable(configTable.TrialName=="Test",:));
                else
                    error("Can not find the configuration for TrialName: " + trialName +...
                        ". No [Test] trial type defined either. Check your configuration file.")
                end
            else
                error("Input type for [config] has to be a string, a table, or a structure.")
            end
            obj.setConfigProperty(obj.ConfigParameter);

            %% Set the control app
            if ~isempty(obj.ControlAppName)
                obj.ControlApp = get(findall(0, 'Tag', obj.ControlAppName), 'RunningAppInstance');
            end
            obj.displayLog("Constructing the object.")

            %% Set the folders
            obj.displayLog("Setting up folders.")
            obj.Writer = createWriter(obj.DatabaseName); %Create writer type database connection
            obj.DateTime = datetime;
            obj.setFolder %Create folders for data storage

            %% Write initial information into the database, then get the serial number generated by the database
            obj.displayLog("Creating a database entry.")
            obj.writeDatabase;
            sqlQuery = "SELECT last_value FROM " + "public."""+obj.DatabaseTableName+"_SerialNumber_seq"";";
            data = pgFetch(obj.Writer,sqlQuery);
            obj.SerialNumber = data.last_value;

        end

        function updateObject(obj)
            obj.displayLog("Updating the object file.")
            save(obj.ObjectPath,'obj')
        end

        function update(obj)
            obj.updateObject
            obj.updateDatabase

            fid = fopen(fullfile(obj.DataPath, "description.txt"), 'wt' );
            fprintf(fid,'\n%s',obj.Description);
            fclose(fid);
        end

        function displayLog(obj,str)
            if isempty(obj.ControlApp)
                disp(str)
            elseif ~isvalid(obj.ControlApp)
                disp(str)
            else
                obj.ControlApp.displayLog(str)
            end
        end

    end

    methods (Abstract)
        writeDatabase(obj)
        updateDatabase(obj)
        setFolder(obj)
        setConfigProperty(obj,struct)
    end

    methods
        function s = struct(obj)
            publicProperties = properties(obj);
            s = struct();
            for fi = 1:numel(publicProperties)
                prop = obj.(publicProperties{fi});
                if isa(prop,"numeric") || isa(prop,"char") ||...
                        isa(prop,"string") || isa(prop,"logical") || isa(prop,"datetime")
                    s.(publicProperties{fi}) = obj.(publicProperties{fi});
                else
                    try
                        s.(publicProperties{fi}) = obj.(publicProperties{fi}).Name;
                    catch
                    end
                end
            end
            s = rmfield(s,"SerialNumber");
        end

        function isCompeted = get.IsCompeted(obj)
            isCompeted = obj.NRun == obj.NCompletedRun;
        end

        function createWatcher(obj)
            obj.FileSystemWatcher = System.IO.FileSystemWatcher(obj.DataPath);
            obj.FileSystemWatcher.Filter = "*"+obj.DataFormat;
            obj.FileSystemWatcher.EnableRaisingEvents = true;
            obj.Watcher = addlistener(obj.FileSystemWatcher,'Created', @(src,event) onChanged(src,event,obj));
            obj.Watcher.Enabled = false;
            function onChanged(~,evt,obj)
                obj.TempDataPath = [obj.TempDataPath string(evt.FullPath.ToString())];
                if numel(obj.TempDataPath) == obj.DataGroupSize
                    notify(obj,'NewRunFinished');
                    obj.TempDataPath = [];
                end
            end
        end

    end

    methods (Static)
        function obj = loadobj(obj)
            try
                obj.Writer = createWriter(obj.DatabaseName); %Create writer type database connection
            catch
            end
            if ~isempty(obj.ControlAppName)
                obj.ControlApp = get(findall(0, 'Tag', obj.ControlAppName), 'RunningAppInstance');
            end
        end
    end

    events
        NewRunFinished %Triggered when a new run is detected.
    end
end

